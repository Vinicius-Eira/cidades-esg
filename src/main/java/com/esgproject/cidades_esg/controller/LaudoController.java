package com.esgproject.cidades_esg.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import com.esgproject.cidades_esg.model.Laudo;
import com.esgproject.cidades_esg.repository.LaudoRepository;

import java.util.List;
import java.util.Random;

@RestController
@RequestMapping("/laudos")
public class LaudoController {

    @Autowired
    private LaudoRepository laudoRepository;

    // üì• Gerar laudo e or√ßamento automaticamente
    @PostMapping
    public Laudo gerarLaudo(@RequestBody Laudo laudo) {
        // Simula√ß√£o de uma "IA" que analisa o problema e gera o laudo
        String descricao = laudo.getDescricaoProblema().toLowerCase();

        String laudoGerado;
        double valor;

        if (descricao.contains("freio")) {
            laudoGerado = "Poss√≠vel desgaste nas pastilhas de freio. Recomendado verificar o sistema de frenagem.";
            valor = 350.0;
        } else if (descricao.contains("motor")) {
            laudoGerado = "Falha detectada no sistema de igni√ß√£o ou combust√≠vel. Sugere-se diagn√≥stico completo do motor.";
            valor = 1200.0;
        } else if (descricao.contains("√≥leo")) {
            laudoGerado = "N√≠vel de √≥leo abaixo do recomendado. √â necess√°ria troca imediata e verifica√ß√£o de vazamentos.";
            valor = 250.0;
        } else if (descricao.contains("barulho")) {
            laudoGerado = "Ru√≠do identificado, possivelmente vindo da suspens√£o ou escapamento.";
            valor = 450.0;
        } else {
            laudoGerado = "An√°lise inconclusiva. Recomendado diagn√≥stico em oficina credenciada.";
            valor = new Random().nextDouble() * 1000 + 200;
        }

        laudo.setLaudoGerado(laudoGerado);
        laudo.setValorEstimado(valor);

        return laudoRepository.save(laudo);
    }

    // üìã Listar todos os laudos
    @GetMapping
    public List<Laudo> listarTodos() {
        return laudoRepository.findAll();
    }

    // üîç Buscar por ID
    @GetMapping("/{id}")
    public Laudo buscarPorId(@PathVariable Long id) {
        return laudoRepository.findById(id).orElse(null);
    }

    // ‚ùå Excluir laudo
    @DeleteMapping("/{id}")
    public void deletar(@PathVariable Long id) {
        laudoRepository.deleteById(id);
    }
}